---
toc: true
---

```{r,echo=FALSE}
library(ggplot2)
```


**Doris and Buzz, in R**. Suppose in the Doris and Buzz example, Buzz pushed the correct button 12 times out of 16 attempts. The null and alternative hypotheses are given by

$$
\begin{align*}
H_0: \pi = 0.5 \\
H_a: \pi > 0.5
\end{align*}
$$
We want to simulate 1000 repetitions of Buzzâ€™s 16 attempts to see how often Buzz would get a sample proportion at least as extreme as 12/16 under the null (chance) model. We represent the null model by fair coin flips (the probability of heads/success is $\pi = 0.5$). 

For simplicity define obtaining a `head=1` and a `tail=0`, then we can simulate flipping a fair coin using the [`sample()` function](/ucla/stats10/sampling_simulation.qmd)

```{r}
set.seed(5039) #<1>
num_flips <- 10
coin_flips <- sample(c(1,0), size = num_flips, 
                     replace = TRUE, prob = c(0.5,0.5)) #<2>
```
1. For reproducibility, specify a seed
2. Sample either `c(1,0)` 10 times with replacement, each with probability of 0.5 of occurring. In other words, flip a fair coin 10 times


```{r,echo=FALSE}
coin_flips 
```


To obtain the proportion of heads obtained, sum the number of heads and divide by the total number of coin flips

```{r}
sum(coin_flips) / num_flips #<1>
```
1. Equivalently, we can use `mean(coin_flips)`


By repeating the single task above many times, we can now simulate the null distribution. 

For the total number of iterations $N$ do the following:

(1) Flip a total of $n$ fair coins
(2) Compute the sample proportion of heads and store the result in a variable, say `sample_proportions`

Lastly, Plot each of the `sample_proportions` using a histogram


```{r}
set.seed(123)
pi <- 0.5 # <1>
num_flips <- 16 
```
1. The null proportion of successes


```{r}
N <- 1000
sample_proportions <- numeric(N) #<1>

for(i in 1:N){
  coin_flips <- sample(c(1, 0), size = num_flips, 
                       replace = TRUE, prob = c(pi, 1 - pi)) #<2>
  
  sample_proportions[i] <- sum(coin_flips) / num_flips #<3>
}
```
1. Store the simulated proportions of successes from each repetition
2. Flip a fair coin `num_flips` times
3. Compute the proportion of heads after `num_flips` fair coin flips and store the result for each repetition

<details>
<summary>Show Code</summary>
You do not need this code, it simply for better visualizations
```{r}
sampling_dist_prop <- ggplot(data.frame(sample_proportions),
                             aes(sample_proportions))+
  geom_histogram(aes(y =after_stat(density)),
                 fill = 'steelblue',alpha = 0.3,
                 color = 'black',bins=30,binwidth = 0.1)+
  geom_vline(xintercept = 12/16, col='red', linetype = 2)+
  labs(title = 'Null distribution',
       x = 'Sample proportions',y = '')+
  theme_bw()
```
</details>


```{r,echo=FALSE}
sampling_dist_prop
```

To compute the p-value, we can find the proportion of simulated sample proportions that are at least as extreme as 12/16 *(those greater than the dotted red line)*


```{r}
p_hat <- 12/16 #<1>

sum(sample_proportions >= p_hat) / N #<2>
```
1. Observed proportion of successes
2. Equivalent to `mean(sample_proportions >= p_hat)`


