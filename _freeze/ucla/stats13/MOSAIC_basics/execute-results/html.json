{
  "hash": "f146442eac4dfd175fcd318dd4390561",
  "result": {
    "markdown": "---\ntoc: true\ncss: styles.css\n---\n\n\n\n```{=html}\n<style>\n  .vertical-space {\n    margin-bottom: 30px;\n  }\n</style>\n```\n\n\n## MOSAIC library\n\n\n### Installation\n\n\nThe goal of the `mosaic` package is to make effective computation accessible to university-level students at an introductory level\n\nThe following packages from the `mosaic suite` will be used throughout the labs.\n\n- `{mosaic}`\n  - `{mosaicCore}`\n  - `{mosaicData}`\n\nYou can the above packages by running the following command in the **Console**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('mosaic')\n```\n:::\n\n\n\n:::callout-warning\nIf you are installing the package for the first time, please be aware that it might take some time since there are numerous dependencies that need to be installed beforehand (this is done automatically)\n:::\n\nYou can see the remaining packages part of the `mosaic suite` on the [Project MOSAIC Homepage](http://www.mosaic-web.org/R-packages.html), but they will not be used for this course\n\n::: vertical-space\n:::\n\n\nIf you have successfully installed `mosaic` package you should be able to run the command  `library(mosaic)` in the console without any errors. However, you will see the following *messages*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mosaic) #<1>\n#> Registered S3 method overwritten by 'mosaic':\n#>   method                           from   \n#>   fortify.SpatialPolygonsDataFrame ggplot2\n#> \n#> The 'mosaic' package masks several functions from core packages in order to add \n#> additional features.  The original behavior of these functions should not be affected by this.  #<2>\n#> \n#> Attaching package: 'mosaic'\n#> The following objects are masked from 'package:dplyr':\n#>     count, do, tally\n#> The following object is masked from 'package:Matrix':\n#>     mean\n#> The following object is masked from 'package:ggplot2':\n#>     stat\n#> The following objects are masked from 'package:stats':\n#>     binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n#>     quantile, sd, t.test, var\n#>     \n#> The following objects are masked from 'package:base':\n#>     max, mean, min, prod, range, sample, sum\n```\n:::\n\n1. Make sure to load `mosiac` package first, you only have to do this once at the beginning of your script. Proceeding, this tutorial will assume you have loaded the `mosaic` package\n2. The output above are simply messages when initially starting up the package warning you about masking of functions with the same name as different packages\n\n\nFor example, the function `binom.test()` is used in two different packages `mosaic` and `stats`. If two packages use the same function name, then the package loaded last will hide the function from earlier packages. This is called **masking**\n\nWhile in general, the order of packages being loaded does not matter, if you are using multiple packages which have functions with the exact same name it is better to explicitly call the function name using `package_name::function`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmosaic::binom.test()\nstats::binom.test()\n```\n:::\n\n\n\n:::vertical-space\n:::\n\n### Commonly used functions\n\nFor **numerical summaries**, the following functions are `mosaic` specific and will be used throughout the course\n\n\n- `tally()`: tabulate categorical data\n- `favstats()`: numerical summaries including: min, Q1, media, Q3, max, mean, sd, number of observations and missing values\n- `diffmean()`: difference in means\n- `prop()`: computes proportions for a single level\n- `perc()`: computes percents for a single level\n\n\nWhile the following functions are in base R, `MOSAIC` provides equivalent functions with a `formula interface`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmosaic::mean()\nmosaic::median()\nmosaic::sd()\n```\n:::\n\n\nIf you are going to use say the function `mean` make sure to specify it is the `mosaic` version. For example, `mosaic::mean()`. If you want to know the differences between base R version \\newline \nrun `?base::mean()` or `?mosaic::mean()`\n\n\n**Randomization/Simulation**\n\nFor randomization or simulations procedures we will primarily use the following `mosaic` functions\n\n- `rflip()`: simulates coin tosses for individuals not yet familiarized with the binomial distribution or just like this syntax and verbosity better.\n- `do()`: provides a natural syntax for repetition tuned to assist with replication and resampling methods\n\n\nFor a quick overview of the basic of MOSAIC package, refer to [Minimal R for Intro Stats](https://cran.r-project.org/web/packages/mosaic/vignettes/MinimalRgg.pdf) tutorial. Note, we will not use all of the functions in the `mosaic` package\n\n\n## Examples\n\nConsider the following vector containing various types of animals (mostly pets)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimals <- c(\"fish\", \"cat\",  \"fish\", \"cat\"  ,\"bird\" ,\"fish\" ,\"bird\" ,\n             \"bird\" ,\"dog\"  ,\"cat\"  ,\"dog\"  ,\"dog\"  ,\"cat\", \"dog\",  \n             \"dog\",  \"cat\",  \"bird\", \"cat\" , \"bird\", \"fish\")\n```\n:::\n\n\nloading the `mosaic` package and using the `tally()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntally(animals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> X\n#> bird  cat  dog fish \n#>    5    6    5    4\n```\n:::\n:::\n\n\nwe can obtain the counts for each animal. By default `tally()` gives us counts, but we can also display the proportions using the `format` argument\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntally(animals, format = 'proportion')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> X\n#> bird  cat  dog fish \n#> 0.25 0.30 0.25 0.20\n```\n:::\n:::\n\n\nwhich is more readable than using base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprop.table(table(animals))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> animals\n#> bird  cat  dog fish \n#> 0.25 0.30 0.25 0.20\n```\n:::\n:::\n\n\n\nReading the documentation `?mosaicCore::tally`, format can take one of the following types\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"count\", \"proportion\", \"percent\", \"data.frame\", \"sparse\", \"default\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntally(animals, format = 'percent')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> X\n#> bird  cat  dog fish \n#>   25   30   25   20\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}