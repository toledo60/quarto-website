{
  "hash": "3f18ed2516a4b979c5631064168e45c3",
  "result": {
    "markdown": "---\ntoc: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n**Doris and Buzz, in R**. Suppose in the Doris and Buzz example, Buzz pushed the correct button 12 times out of 16 attempts. The null and alternative hypotheses are given by\n\n$$\n\\begin{align*}\nH_0: \\pi = 0.5 \\\\\nH_a: \\pi > 0.5\n\\end{align*}\n$$\nWe want to simulate 1000 repetitions of Buzzâ€™s 16 attempts to see how often Buzz would get a sample proportion at least as extreme as 12/16 under the null (chance) model. We represent the null model by fair coin flips (the probability of heads/success is $\\pi = 0.5$). \n\nFor simplicity define obtaining a `head=1` and a `tail=0`, then we can simulate flipping a fair coin using the [`sample()` function](/ucla/stats10/sampling_simulation.qmd)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(5039) #<1>\nnum_flips <- 10\ncoin_flips <- sample(c(1,0), size = num_flips, \n                     replace = TRUE, prob = c(0.5,0.5)) #<2>\n```\n:::\n\n1. For reproducibility, specify a seed\n2. Sample either `c(1,0)` 10 times with replacement, each with probability of 0.5 of occurring. In other words, flip a fair coin 10 times\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 0 1 1 0 0 0 1 0 1\n```\n:::\n:::\n\n\n\nTo obtain the proportion of heads obtained, sum the number of heads and divide by the total number of coin flips\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(coin_flips) / num_flips #<1>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5\n```\n:::\n:::\n\n1. Equivalently, we can use `mean(coin_flips)`\n\n\nBy repeating the single task above many times, we can now simulate the null distribution. \n\nFor the total number of iterations $N$ do the following:\n\n(1) Flip a total of $n$ fair coins\n(2) Compute the sample proportion of heads and store the result in a variable, say `sample_proportions`\n\nLastly, Plot each of the `sample_proportions` using a histogram\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\npi <- 0.5 # <1>\nnum_flips <- 16 \n```\n:::\n\n1. The null proportion of successes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN <- 1000\nsample_proportions <- numeric(N) #<1>\n\nfor(i in 1:N){\n  coin_flips <- sample(c(1, 0), size = num_flips, \n                       replace = TRUE, prob = c(pi, 1 - pi)) #<2>\n  \n  sample_proportions[i] <- sum(coin_flips) / num_flips #<3>\n}\n```\n:::\n\n1. Store the simulated proportions of successes from each repetition\n2. Flip a fair coin `num_flips` times\n3. Compute the proportion of heads after `num_flips` fair coin flips and store the result for each repetition\n\n<details>\n<summary>Show Code</summary>\nYou do not need this code, it simply for better visualizations\n\n::: {.cell}\n\n```{.r .cell-code}\nsampling_dist_prop <- ggplot(data.frame(sample_proportions),\n                             aes(sample_proportions))+\n  geom_histogram(aes(y =after_stat(density)),\n                 fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30,binwidth = 0.1)+\n  geom_vline(xintercept = 12/16, col='red', linetype = 2)+\n  labs(title = 'Null distribution',\n       x = 'Sample proportions',y = '')+\n  theme_bw()\n```\n:::\n\n</details>\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](null_proportion_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nTo compute the p-value, we can find the proportion of simulated sample proportions that are at least as extreme as 12/16 *(those greater than the dotted red line)*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_hat <- 12/16 #<1>\n\nsum(sample_proportions >= p_hat) / N #<2>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.037\n```\n:::\n:::\n\n1. Observed proportion of successes\n2. Equivalent to `mean(sample_proportions >= p_hat)`\n\n\n",
    "supporting": [
      "null_proportion_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}