{
  "hash": "259f5ed4f7b8b55c9e6991528174a961",
  "result": {
    "markdown": "---\nauthor: Jose Toledo Luna\ndate: today\ntitle: Lab 2\ndescription: Logical Statements with Applications\ntoc: true\n---\n\n\n\n\n---\n \n## Logical Statements\n\nThere are only two logical values, `TRUE` and `FALSE`. In R, we can abbreviate `TRUE` with `T` and `FALSE` with `F`. They can be interpreted as any option corresponding to a binary choice. For example, yes/no, do/don't, satisfied/not satisfied or even `1/0`.\n\nA basic way to define a logical statement is using a **relational operator** to compare two expressions. For example, we may ask ourselves *\"is x less than a certain number ?\"* or using a real world example from the `mtcars` dataset *\"how many cars have more than 18 miles per gallon?\"*\n\n### Relational operators\n\nThe table below summarizes some of the **relational operators** available in R:\n\n| Operator | Interpretation           | Basic Example | Result  |\n|----------|--------------------------|---------------|---------|\n| ==       | Equal to                 | 5 == 5        | `TRUE`  |\n| !=       | Not equal to             | 4 != 5        | `TRUE`  |\n| \\>       | Greater than             | 4 \\> 5        | `FALSE` |\n| \\<       | Less than                | 4 \\< 5        | `TRUE`  |\n| \\<=      | Less than or equal to    | 4 \\<= 5       | `TRUE`  |\n| \\>=      | Greater than or equal to | 4 \\>= 5       | `FALSE` |\n\nFrom the table above we consider single numbers as our two expression to compare, but we can extend this idea to vectors, data.frames, matrices of various data types. When applying relational operators to vectors it is important to know they are being compared *element-wise*.\n\nWe first start off by comparing a vector with a single number\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,3,5,7,9) < 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]  TRUE  TRUE FALSE FALSE FALSE\n```\n:::\n:::\n\n\n*Interpretation: Is 1 less than 5? is 3 less than 5? is 5 less than 5? is 7 less than 5? is 9 less than 5?*\n\nThe output from the above example is a `logical` vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(c(1,3,5,7,9) < 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"logical\"\n```\n:::\n:::\n\n\nwith `TRUE/FALSE` if the given condition was satisfied or not. What if we were given the question *\"How many values of x are smaller than some number?\"*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum( c(1,3,5,7,9) < 5 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 2\n```\n:::\n:::\n\n\nwe can then apply the `sum()` function to count how many `TRUE` were in our logical vector. This will be very useful when we have very large vectors and we can't count how many `TRUE` were in our vector manually.\n\nBelow are some examples applying relational operators to compare two vectors of the same length\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,2,3,4) < c(5,4,3,2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]  TRUE  TRUE FALSE FALSE\n```\n:::\n:::\n\n\n*Interpretation: Is 1 less than 5? is 2 less than 4? is 3 less than 3? is 4 less than 2?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,2,3,4) <= c(5,4,3,2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]  TRUE  TRUE  TRUE FALSE\n```\n:::\n:::\n\n\n*Interpretation: Is 1 less than or equal to 5? is 2 less than or equal to 4? is 3 less than or equal to 3? is 4 less than or equal to 2?*\n\n\nAnother topic to consider is comparing two strings. While this can be a more advance topic we only consider the simplest scenario in which we compare case-sensitive strings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstring1 <- 'Hello'\nstring2 <- 'hello'\n```\n:::\n\n\nwhile the above strings contain the same characters in the same order, if we compare them directly they will be considered different \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstring1 == string2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] FALSE\n```\n:::\n:::\n\n*Interpretation: are string1 and string2 identical?*\n\nHowever, if were are interested in seeing if they contain the same characters regardless of the case sensitivity, we can use `tolower()` function as follows\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntolower(string1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"hello\"\n```\n:::\n\n```{.r .cell-code}\ntolower(string2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"hello\"\n```\n:::\n:::\n\n\n`tolower()` will convert any upper-case character in a vector into lower-case character.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntolower(string1) == tolower(string2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] TRUE\n```\n:::\n:::\n\n\nSince all the characters are now lower-case, and both strings contain the same characters in the same order then they are now identical.\n\nFor more advanced examples in comparing strings check out the following [blog post](https://www.r-bloggers.com/2022/01/how-to-compare-strings-in-r-with-examples/) *(Optional)*\n\n\n### Logical operators\n\nIn practice, we often need to use multiple conditions to make certain decisions. For example, you have a personal rule that if there is no homework *AND* you don't have class, then you will go out with your friends. Now, explore what happens to this rule when *OR* is used instead of *AND*, also what happens when negation (*NOT* ) is added to one or both clauses.\n\nThe table below summarizes some of these logical operators\n\n+---------------+------------------------------------------------------------------------------------------+-----------------------+-----------------------+\n| Operator      | Interpretation                                                                           | Basic Example         | Result                |\n+:=============:+==========================================================================================+=======================+=======================+\n| !             | **NOT** <br> *If the condition is true,* <br>*logical NOT operator returns as false*     | ! (5 == 5)            | `FALSE`               |\n+---------------+------------------------------------------------------------------------------------------+-----------------------+-----------------------+\n| &             | **AND**<br> *(element-wise)* <br> *Returns true when both conditions are true*           | TRUE `&` TRUE         | `TRUE`                |\n|               |                                                                                          |                       |                       |\n|               |                                                                                          | TRUE `&` FALSE        | `FALSE`               |\n|               |                                                                                          |                       |                       |\n|               |                                                                                          | FALSE `&` TRUE        | `FALSE`               |\n|               |                                                                                          |                       |                       |\n|               |                                                                                          | FALSE `&` FALSE       | `FALSE`               |\n+---------------+------------------------------------------------------------------------------------------+-----------------------+-----------------------+\n| &&            | **AND**<br> *(single comparison)* <br> *Same as above but for single comparison*         | *(same as `&` above)* | *(same as `&` above)* |\n+---------------+------------------------------------------------------------------------------------------+-----------------------+-----------------------+\n| \\|            | **OR**<br> *(element-wise)* <br> *Returns true when at-least one of conditions is true*  | TRUE `|`TRUE          | `TRUE`                |\n|               |                                                                                          |                       |                       |\n|               |                                                                                          | TRUE `|` FALSE        | `TRUE`                |\n|               |                                                                                          |                       |                       |\n|               |                                                                                          | FALSE `|` TRUE        | `TRUE`                |\n|               |                                                                                          |                       |                       |\n|               |                                                                                          | FALSE `|` FALSE       | `FALSE`               |\n+---------------+------------------------------------------------------------------------------------------+-----------------------+-----------------------+\n| \\|\\|          | **OR** <br> *(single comparison)* <br> *Same as above but for single comparison*         | *(same as `|` above)* | *(same as `|` above)* |\n+---------------+------------------------------------------------------------------------------------------+-----------------------+-----------------------+\n\n\nThe difference between *element-wise* and *single comparison* can be seen in the examples below\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(TRUE,TRUE,FALSE,FALSE) | c(TRUE,FALSE,TRUE,FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]  TRUE  TRUE  TRUE FALSE\n```\n:::\n:::\n\n*Interpretation: TRUE or FALSE, TRUE or FALSE, FALSE or TRUE, FALSE or FALSE*\n\n*Element-wise* will return a vector of logical values, one for each pair of logicals combined. Whereas, *single comparison* only compares the first two elements of the logical vectors and will return a single logical value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(TRUE,TRUE,FALSE,FALSE) || c(TRUE,FALSE,TRUE,FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in c(TRUE, TRUE, FALSE, FALSE) || c(TRUE, FALSE, TRUE, FALSE):\n#> 'length(x) = 4 > 1' in coercion to 'logical(1)'\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] TRUE\n```\n:::\n:::\n\n*Interpretation: TRUE or TRUE*\n\nThe above will output `TRUE` since it only considers the first elements of the respective vectors, but it will warn us that the length of the vectors have more than one element.  A better example for single comparisons would be as follows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- 20\nage > 10 && age < 30\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] TRUE\n```\n:::\n:::\n\n*Interpretation: Is age greater than AND less than 30?*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage == 18 || age <= 21\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] TRUE\n```\n:::\n:::\n\n*Interpretation: Is age 18 OR less than or equal to 21 ?*\n\n\nConsider a more complicated example of holding office in the United States.\nThe president must be a natural-born citizen of the United States, be at least 35 years old, and have been a resident of the United States for 14 years\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncandidate_age <- 40\ncandidate_birth <- 'United States'\ncandidate_residance_years <- 10\n```\n:::\n\n\nWe have a candidate who is 40 years old, was born in the United States but for some reason they have only been a resident of the United States for 10 years. Clearly, this candidate is not eligible to become our next president. We demonstrate this using logical operators\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncandidate_age >= 35\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] TRUE\n```\n:::\n:::\n\n*Interpretation: Is the candidate at least 35 years old?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncandidate_birth == 'United States'\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] TRUE\n```\n:::\n:::\n\n*Interpretation: Is the candidate born in United States?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncandidate_residance_years >= 14\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] FALSE\n```\n:::\n:::\n\n*Interpretation: Has the candidate been a resident for at least 14 years?*\n\nPutting all of the above together,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(candidate_age >= 35) && (candidate_birth == 'United States') && (candidate_residance_years >= 14)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] FALSE\n```\n:::\n:::\n\n*Interpretation: TRUE AND TRUE AND FALSE*\n\nSince one of the conditions fails the entire statement will be false.\n\n## Subsetting\n\n### Vectors\n\nNow that we have an idea of how to construct logical statements, we can apply them to subset our data based on a given condition\n\nConsider the following vector `dat` with 18 values\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- c(11, 13, 18, 3, 2, 24, 10, 8, 5, \n         13, 3, 23, 7, 25, 17, 20, 11, 17)\n```\n:::\n\n\nWe will subset `dat` based on the following conditions:\n\n**1.  How many values are bigger than 10?**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat > 10 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1]  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE\n#> [13] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\nsum(dat > 10 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 11\n```\n:::\n:::\n\n\nwhile knowing how many values are bigger than 10 is useful, we may only want to keep those values and not the ones that are smaller than 10.\n\n**2.  Keep the values that are bigger than 10?**\n\nIf given a vector, the way to subset it based on a condition is as follows: <br> `vector[ condtion ]`. Our condition is all the values that are bigger than 10, that is `dat > 10`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat[ dat > 10 ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] 11 13 18 24 13 23 25 17 20 11 17\n```\n:::\n:::\n\n\n**3. How many values are exactly 11 ?**\n\nOur condition is `dat == 11`,this should only return two `TRUE`, and after using the `sum()` function to count them we obtain\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(dat == 11)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 2\n```\n:::\n:::\n\n\nIf we wanted to extract these values from `dat` we would run\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat[ dat == 11 ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 11 11\n```\n:::\n:::\n\n\n\nNext we use the `birth` dataset for the following examples\n\n**4. How many females were in this dataset?**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirth_dat <- read.csv(file = \"/Users/toledo60/Desktop/Projects/personal-website/ucla/stats10/data/births.csv\")\n```\n:::\n\n\nFirst we extract the values from the `Gender` column and store them in a variable called `gender_vec`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngender_vec <- birth_dat$Gender\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(gender_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"Male\"   \"Female\"\n```\n:::\n:::\n\n\n:::callout-warning\nRecall strings are case-sensitive, so you must spell 'Female' exactly as it appears above\n:::\n\nThen we subset this vector to only include females\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfemales_vec <- gender_vec[gender_vec == 'Female']\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(females_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"Female\"\n```\n:::\n:::\n\n\nNow our vector only contains females, we can use `length()` to count how many females were in this dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(females_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 957\n```\n:::\n:::\n\n\nAn easier approach would be to simply create the variable `gender_vec` and count how many females are in that vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(gender_vec == 'Female')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 957\n```\n:::\n:::\n\n\n\n### Data frames\n\nConsidering *example 4* in the [vectors](#vectors) section of subsetting, we are extracting solely the values from a specific column based on a given condition. However, in some scenarios we may want to preserve all other information *(columns)* from our dataset after subsetting our data.\n\nData frames have the following structure `data[rows,columns]`. The first \nargument inside the brackets will specify the rows and the second argument will specify the columns. We can apply all of the subsetting techniques we covered in the [vectors](#section) within the rows, columns, or both rows and columns\n`data[condition for rows, condition for columns]`\n\n\nFor example, if we wanted to subset the `births` dataset to only include females\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_female <- birth_dat$Gender == 'Female'\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbirth_dat[is_female, ]\n```\n:::\n\n*Interpretation: Subset the rows to only include females, keep all the other columns*\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n#>   Gender Premie weight Apgar1 Fage Mage Feduc Meduc TotPreg Visits   Marital\n#> 2 Female     No    177      8   36   26     9    12       2     11 Unmarried\n#> 4 Female     No    144      6   33   37    12    14       2     12 Unmarried\n#> 6 Female     No     98      4   31   29    14    16       3     20   Married\n#>   Racemom Racedad Hispmom Hispdad Gained     Habit MomPriorCond BirthDef\n#> 2   White   White Mexican Mexican     20 NonSmoker         None     None\n#> 4   White   White NotHisp NotHisp     50 NonSmoker         None     None\n#> 6   White   White NotHisp NotHisp     21 NonSmoker         None     None\n#>      DelivComp BirthComp\n#> 2 At Least One      None\n#> 4 At Least One      None\n#> 6         None      None\n```\n:::\n:::\n\n\nYou will notice that we only applied a condition to the rows argument and not the columns argument. In the case where one of the arguments is left blank, then no condition will be applied to the respective argument.\n\nFor practice, consider the following examples\n\n**1. Create a new data frame containing the columns: Gender, weight, and Habit**\n\nWe can use `colnames()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(birth_dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] \"Gender\"       \"Premie\"       \"weight\"       \"Apgar1\"       \"Fage\"        \n#>  [6] \"Mage\"         \"Feduc\"        \"Meduc\"        \"TotPreg\"      \"Visits\"      \n#> [11] \"Marital\"      \"Racemom\"      \"Racedad\"      \"Hispmom\"      \"Hispdad\"     \n#> [16] \"Gained\"       \"Habit\"        \"MomPriorCond\" \"BirthDef\"     \"DelivComp\"   \n#> [21] \"BirthComp\"\n```\n:::\n:::\n\n\nto make sure we have the correct spelling of the appropriate columns we want to keep. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirth2 <- birth_dat[ , c('Gender','weight','Habit')]\n```\n:::\n\n*Interpretation: Keep all the rows, but only keep the columns: Gender, weight, and Habit*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(birth2,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   Gender weight     Habit\n#> 1   Male    124 NonSmoker\n#> 2 Female    177 NonSmoker\n#> 3   Male    107 NonSmoker\n```\n:::\n:::\n\n\nWe created a character vector with the names of the columns we wanted to keep and used it as the condition in the columns argument.\n\n\n\n**2. Split `birth_dat` into two parts: One for which the individual was a smoker and another for which they were not a smoker**\n\nThe variable `Habit` contains information on whether or not the individual was a smoker.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(birth_dat$Habit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"NonSmoker\" \"Smoker\"\n```\n:::\n:::\n\n\nFirst we create a logical vector to determine if the individual was a smoker \n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_smoker <- birth_dat$Habit == 'Smoker'\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_smoker[1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] FALSE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n*Interpretation: Return TRUE if Habit is smoker, otherwise FALSE*\n\nWe use the negation [logical operator](#logical-operators) to obtain all the non-smokers from our logical vector `is_smoker` without having to create a new variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\n!is_smoker[1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] TRUE TRUE TRUE TRUE TRUE\n```\n:::\n:::\n\n\nTo subset our data into keeping only the smokers we input our logical vector `is_smoker` into the rows argument\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmokers <- birth_dat[is_smoker, ]\n```\n:::\n\n*Interpretation: Only keep the rows in which the individual is a smoker*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(smokers,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>    Gender Premie weight Apgar1 Fage Mage Feduc Meduc TotPreg Visits   Marital\n#> 15 Female     No    106      8   28   29    13    12       3     15   Married\n#> 17 Female     No    115      8   30   18    12    10       1     20 Unmarried\n#> 18   Male     No    128      9   21   19    12    12       2     13 Unmarried\n#>    Racemom Racedad Hispmom Hispdad Gained  Habit MomPriorCond BirthDef\n#> 15   White   White NotHisp NotHisp     37 Smoker         None     None\n#> 17   White Unknown NotHisp Unknown     45 Smoker         None     None\n#> 18   White   Black NotHisp NotHisp     35 Smoker         None     None\n#>       DelivComp BirthComp\n#> 15         None      None\n#> 17         None      None\n#> 18 At Least One      None\n```\n:::\n:::\n\n\nTo subset our data into keeping only the non-smokers we input our logical vector `!is_smoker` into the rows argument\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_smokers <- birth_dat[!is_smoker, ]\n```\n:::\n\n*Interpretation: Only keep the rows in which the individual is NOT a smoker*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(not_smokers,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   Gender Premie weight Apgar1 Fage Mage Feduc Meduc TotPreg Visits   Marital\n#> 1   Male     No    124      8   31   25    13    14       1     13   Married\n#> 2 Female     No    177      8   36   26     9    12       2     11 Unmarried\n#> 3   Male     No    107      3   30   16    12     8       2     10 Unmarried\n#>   Racemom Racedad Hispmom Hispdad Gained     Habit MomPriorCond BirthDef\n#> 1   White   White NotHisp NotHisp     40 NonSmoker         None     None\n#> 2   White   White Mexican Mexican     20 NonSmoker         None     None\n#> 3   White Unknown Mexican Unknown     70 NonSmoker At Least One     None\n#>      DelivComp BirthComp\n#> 1 At Least One      None\n#> 2 At Least One      None\n#> 3 At Least One      None\n```\n:::\n:::\n\n\n\n**3. What is the average weight of babies with at least one birth defect?**\n\nThe variable `BirthDef` determines if the baby had no birth defects or had at least one defect\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(birth_dat$BirthDef)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"None\"         \"At Least One\"\n```\n:::\n:::\n\n\nCreate a logical vector to determine if the baby had at least one defect\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhas_defect <- (birth_dat$BirthDef == 'At Least One')\n```\n:::\n\n\n:::callout-note\nWe must spell \"At Least One\" with correct upper/lower cases including spaces\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhas_defect[1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] FALSE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\nSubset our data to include rows with babies with at least one defect, then select only the `weight` column. Lastly compute the mean.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean( birth_dat[has_defect,'weight'] )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 115.8\n```\n:::\n:::\n\n*Interpretation: Average weight of babies with at least one birth defect*\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}