{
  "hash": "3d309177d839ba68a5b841a539e2d34b",
  "result": {
    "markdown": "\n\n\n\nIn this lab, you will learn\n\n1. To apply transformations to your data\n\nSuppose you have a response variable $y$ which needs to be transformed, say for variance stabilization purposes. Some basic transformations are listed below\n\n| Transformation | R Function | Transformed Response | Domain           |\n|----------------|------------|----------------------|------------------|\n| Reciprocal     | *y\\^(-1)*  | $\\frac{1}{y}$        | $y \\neq 0$       |\n| Log            | *log(y)*   | $\\log y$             | $y >0$           |\n| Square Root    | *sqrt(y)*  | $\\sqrt{y}$           | $y \\geq 0$       |\n| Square         | *y\\^2*     | $y^2$                | All real numbers |\n| Exponential    | *exp(y)*   | $e^y$                | All real numbers |\n\nDepending on the application some transformations may be more appropriate than others.\n\nFirst, lets generate a random response variable $y$ with 50 values. We specify a seed using `set.seed()` in order to reproduce similar results shown below\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(18)\ny <- rgamma(50,2,10)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] 0.28492579 0.45631601 0.50317261 0.13304628 0.33509542 0.05813613\n#>  [7] 0.23415665 0.15000215 0.13595787 0.31648072 0.07033782 0.04414201\n#> [13] 0.34005064 0.13528212 0.57996693 0.66426519 0.25217007 0.09663117\n#> [19] 0.30357963 0.24263107 0.03466842 0.17287548 0.17934404 0.24350592\n#> [25] 0.18000853 0.27619986 0.11817287 0.21969142 0.26853696 0.03168664\n#> [31] 0.24282428 0.20868909 0.09576173 0.21705702 0.09041832 0.08098566\n#> [37] 0.05996757 0.32065579 0.21827266 0.21039568 0.23483495 0.16534900\n#> [43] 0.21858625 0.09937335 0.25353361 0.14190489 0.21438947 0.09850541\n#> [49] 0.73591941 0.09278035\n```\n:::\n:::\n\n\n## Log transformation\n\nIf we apply the log transformation to our response variable we simply calculate $log(y)$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_y <- log(y)\nlog_y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] -1.2555265 -0.7845697 -0.6868220 -2.0170582 -1.0933399 -2.8449680\n#>  [7] -1.4517649 -1.8971057 -1.9954102 -1.1504930 -2.6544457 -3.1203434\n#> [13] -1.0786607 -2.0003929 -0.5447842 -0.4090738 -1.3776515 -2.3368539\n#> [19] -1.1921113 -1.4162132 -3.3619262 -1.7551837 -1.7184493 -1.4126140\n#> [25] -1.7147510 -1.2866305 -2.1356067 -1.5155314 -1.3147667 -3.4518601\n#> [31] -1.4154172 -1.5669097 -2.3458921 -1.5275952 -2.4033084 -2.5134832\n#> [37] -2.8139514 -1.1373870 -1.5220103 -1.5587653 -1.4488723 -1.7996969\n#> [43] -1.5205746 -2.3088713 -1.3722589 -1.9525983 -1.5399610 -2.3176438\n#> [49] -0.3066347 -2.3775205\n```\n:::\n:::\n\n\nUsing histograms we can visualize the distributions to see the differences in our response variable after applying a *log-transformation*\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nhist(y,main='Original',\n     xlab = 'y',\n     col = '#f56356')\n```\n\n::: {.cell-output-display}\n![](transformations_files/figure-html/unnamed-chunk-3-1.png){width=576}\n:::\n\n```{.r .cell-code}\nhist(log_y,main='Log-Transformation',\n     xlab = 'log(y)',\n     col = '#568bf5')\n```\n\n::: {.cell-output-display}\n![](transformations_files/figure-html/unnamed-chunk-3-2.png){width=576}\n:::\n:::\n\n\nAfter applying the log-transformation you'll notice that it is more normally distributed *(bell-shaped curve)* compared to the original distribution.\n\nIt is important to take into account the domain for which the transformation is valid. For the log-transformation we need all values from our response variable to be greater than zero, otherwise we will obtain the following errors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] -Inf\n```\n:::\n\n```{.r .cell-code}\nlog(-1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in log(-1): NaNs produced\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] NaN\n```\n:::\n:::\n\n\n## Square root transformation\n\nAnother transformation to consider is the *square root transformation*. This can be done using `sqrt()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt_y <- sqrt(y)\n```\n:::\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nhist(y,main='Original',\n     xlab = 'y',\n     col = '#f56356')\n```\n\n::: {.cell-output-display}\n![](transformations_files/figure-html/unnamed-chunk-6-1.png){width=576}\n:::\n\n```{.r .cell-code}\nhist(sqrt_y,main='Square Root-Transformation',\n     xlab = 'sqrt(y)',\n     col = '#568bf5')\n```\n\n::: {.cell-output-display}\n![](transformations_files/figure-html/unnamed-chunk-6-2.png){width=576}\n:::\n:::\n\n\n\n## Square transformation\n\nThe last transformation we consider is the *square transformation*. This can be done using `y^2`. In general any power transformation can be applied in a similar manner, $y^{(a)}$ where $a$ is any real number\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny_squared <- y^2\n```\n:::\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nhist(y,main='Original',\n     xlab = 'y',\n     col = '#f56356')\n```\n\n::: {.cell-output-display}\n![](transformations_files/figure-html/unnamed-chunk-8-1.png){width=576}\n:::\n\n```{.r .cell-code}\nhist(y_squared,main='Square Transformation',\n     xlab = 'y^2',\n     col = '#568bf5')\n```\n\n::: {.cell-output-display}\n![](transformations_files/figure-html/unnamed-chunk-8-2.png){width=576}\n:::\n:::\n\n\nSince we are squaring small numbers the resulting distribution will be more skewed right than the original distribution\n\n",
    "supporting": [
      "transformations_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}